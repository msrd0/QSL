
if(CMAKE_VERSION VERSION_LESS 3.1)
	set(SPIS_FOUND False)
	set(SPIS_NOT_FOUND_MESSAGE "SPIS needs at least CMake version 3.1")
	return()
endif()

include(@CMAKE_INSTALL_PREFIX@/@CMAKEDIR@/SPIS/SPISVersion.cmake)

# lets find qt first
if (NOT Qt5Core_FOUND)
	find_package(Qt5Core 5.5)
endif()
if (NOT Qt5Sql_FOUND)
	find_package(Qt5Sql 5.5)
endif()
if (NOT Qt5Core_FOUND OR NOT Qt5Sql_FOUND)
	set(SPIS_FOUND False)
	set(SPIS_NOT_FOUND_MESSAGE "Unable to find Qt >= 5.5")
	return()
endif()

# search for SPISDriver library (SPISCore depends on it)
if (NOT SPISDriver_FOUND)
	find_package(SPISDriver @SPIS_VERSION@)
endif()
if (NOT SPISDriver_FOUND)
	set(SPIS_FOUND False)
	set(SPIS_NOT_FOUND_MESSAGE "Unable to find package SPISDriver")
	return()
endif()

# search for SPISCore library
if (NOT SPISCore_FOUND)
	find_package(SPISCore @SPIS_VERSION@)
endif()
if (NOT SPISCore_FOUND)
	set(SPIS_FOUND False)
	set(SPIS_NOT_FOUND_MESSAGE "Unable to find package SPISCore")
	return()
endif()

# search for SPIS Compiler
if (NOT SPISC_FOUND)
	find_package(SPISC @SPIS_VERSION@)
endif()
if (NOT SPISC_FOUND)
	set(SPIS_FOUND False)
	set(SPIS_NOT_FOUND_MESSAGE "Unable to find spisc")
	return()
endif()

if ((NOT CMAKE_CXX_STANDARD) OR (CMAKE_CXX_STANDARD LESS 11))
   set(CMAKE_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(SPIS_INCLUDE_DIRS "${Qt5Sql_INCLUDE_DIRS}" "@CMAKE_INSTALL_PREFIX@/include/spis")

include(@CMAKE_INSTALL_PREFIX@/@CMAKEDIR@/SPIS/SPISMacros.cmake)
