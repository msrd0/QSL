
if(CMAKE_VERSION VERSION_LESS 3.1)
	set(QSL_FOUND False)
	set(QSL_NOT_FOUND_MESSAGE "QSL needs at least CMake version 3.1")
	return()
endif()

include(@CMAKE_INSTALL_PREFIX@/@CMAKEDIR@/QSL/QSLVersion.cmake)

# lets find qt first
if (NOT Qt5Core_FOUND)
	find_package(Qt5Core 5.5)
endif()
if (NOT Qt5Sql_FOUND)
	find_package(Qt5Sql 5.5)
endif()
if (NOT Qt5Core_FOUND OR NOT Qt5Sql_FOUND)
	set(QSL_FOUND False)
	set(QSL_NOT_FOUND_MESSAGE "Unable to find Qt >= 5.5")
	return()
endif()

# search for QSLDriver library (QSLCore depends on it)
if (NOT QSLDriver_FOUND)
	find_package(QSLDriver @QSL_VERSION@)
endif()
if (NOT QSLDriver_FOUND)
	set(QSL_FOUND False)
	set(QSL_NOT_FOUND_MESSAGE "Unable to find package QSLDriver")
	return()
endif()

# search for QSLCore library
if (NOT QSLCore_FOUND)
	find_package(QSLCore @QSL_VERSION@)
endif()
if (NOT QSLCore_FOUND)
	set(QSL_FOUND False)
	set(QSL_NOT_FOUND_MESSAGE "Unable to find package QSLCore")
	return()
endif()

# search for QSL Compiler
if (NOT QSLC_FOUND)
	find_package(QSLC @QSL_VERSION@)
endif()
if (NOT QSLC_FOUND)
	set(QSL_FOUND False)
	set(QSL_NOT_FOUND_MESSAGE "Unable to find qslc")
	return()
endif()

if ((NOT CMAKE_CXX_STANDARD) OR (CMAKE_CXX_STANDARD LESS 11))
   set(CMAKE_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(QSL_INCLUDE_DIRS "${Qt5Sql_INCLUDE_DIRS}" "@CMAKE_INSTALL_PREFIX@/include/qsl")

include(@CMAKE_INSTALL_PREFIX@/@CMAKEDIR@/QSL/QSLMacros.cmake)
